[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Parallalism in Numerical Python Libraries",
    "section": "",
    "text": "Welcome to the Design Document for CPU parallelism in NumPy, SciPy, scikit-learn, and pandas. Each library has varying levels of support for running parallel computation. This document details the current status of parallelism with shipping code on PyPI and possible paths for improvement."
  },
  {
    "objectID": "index.html#current-landscape",
    "href": "index.html#current-landscape",
    "title": "Parallalism in Numerical Python Libraries",
    "section": "Current Landscape",
    "text": "Current Landscape\nEach library ships with an assortment of parallel interfaces on PyPi:\n\nNumPy’s linalg module and matrix multiplication utilize OpenBLAS, which is multi-threaded by default. NumPy ships with OpenBLAS built with pthreads.\nSciPy’s linalg module uses OpenBLAS, which is also multi-threaded by default and built with pthreads. Functions with the n_workers parameter may use multiprocessing, multithreading module, or pthreads.\nBy default, most computation in Pandas runs in serial. The only parallel mechanism is enabled through Numba by setting passing parallel=True to engine_kwargs.\nScikit-learn uses the linalg module from NumPy and SciPy, which is multi-threaded by default. Scikit-learn ships with OpenMP and runs OpenMP accelerated code in parallel by default. The library also has a n_jobs parameter that uses Python’s multithreading or loky, an improved Python-based Process Pool Executor.\n\nOn PyPi, if a library requires OpenMP or OpenBLAS, it bundles the shared library into the wheel: Source\n\n\n\nCurrent PyPI landscape"
  },
  {
    "objectID": "index.html#issues-with-the-current-landscape",
    "href": "index.html#issues-with-the-current-landscape",
    "title": "Parallalism in Numerical Python Libraries",
    "section": "Issues with the Current Landscape",
    "text": "Issues with the Current Landscape\nThe current landscape has three broad categories of issues: - APIs for controlling parallelism is not consistent between libraries. - By default, BLAS and scikit-learn’s OpenMP are multi-threaded and can lead to unexpected problems. - Interactions between different forms of parallelism may lead to slowdowns, crashes, or oversubscription.\n\nAPIs for Configuring Parallelism\nThere are three ways to configure parallelism across the libraries: environment variables, threadpoolctl, or library-specific Python API.\nExamples of environment variables consist of: - OPENBLAS_NUM_THREADS for OpenBLAS - MKL_NUM_THREADS for MKL - OMP_NUM_THREADS for OpenMP\nThese environment variables control how many threads a specific backend uses. These environment variables do not influence code that does not use a particular backend, like OpenMP. For example, SciPy’s fft module uses pthreads directly.\nThreadpoolctl provides a Python interface for configuring the number of threads in OpenBLAS, MKL, and OpenMP. Linear algebra function calls from NumPy, SciPy, or scikit-learn can all be configured with threadpoolctl or an environment variable.\nSciPy and scikit-learn have a library-specific Python API for controlling parallelism. SciPy’s n_workers can mean multithreading, multiprocessing, or pthreads. Scikit-learn’s n_jobs is either multiprocessing or multithreading. threadpoolctl or OMP_NUM_THREADS configured scikit-learn’s computation routines that use OpenMP. Note that scikit-learn’s n_jobs does not configure OpenMP parallelism.\n\nProposal\nI see the solution in two steps:\n\nDocument the functions or methods using OpenMP or BLAS and can be configured with an environment variable or threadpoolctl.\nAdopt a consistent Python API for configuring parallelism.\n\n\n\n\nMulti-threaded by Default\nBLAS implementations such as OpenBLAS are multi-threaded by default. Scikit-learn followed this convention with OpenMP, which is also multi-threaded by default. Using all the CPU cores by default is convenient for interactive use cases like in a Jupyter Notebook. The downside of using all CPU cores is during deployment to shared environments. The user needs to know which API to configure their program to become serial from the above section.\n\nProposal\nThere are two options here:\n\nKeep the status quo where BLAS is multi-threaded by default. Libraries such as scikit-learn’s OpenMP accelerated routines will continue to be parallel as the default.\nMigrate over to single-thread as the default. Each library has a global flag that configures all computations to be parallel.\n\nIn both cases, libraries still need to document the functions or methods that are parallalized with BLAS or OpenMP.\n\n\n\nInteractions Between Different Forms of Parallelism\nWhen different parallelism interfaces are running concurrently, it is possible to run into crashes or oversubscription. The following is a list of known issues:\n\nlibgomp (OpenMP for GCC) is not fork-safe while libomp (OpenMP for Clang) is fork-safe. Scikit-learn has developed loky as a workaround. There is a patch to GCC OpenMP to make it fork safe, but it has not progressed. For details, see this FAQ entry.\nlibomp (OpenMP for Clang) not compatible with libiomp (OpenMP for Intel Complier). The workaround is to set MKL_THREADING_LAYER=GNU. See this link for details.\nlibgomp (OpenMP for GCC) is also not compatible with libiomp (OpenMP for Intel Complier): pytorch#37377\nThere are performance issues when OpenBLAS (built with pthreads) and OpenMP have separate threadpools: OpenBLAS#3187. A workaround is to share the same threadpool by building OpenBLAS with OpenMP.\nThere are performance issues when two OpenBLAS are present, such as in NumPy and SciPy: scipy#15129. The current workaround is to set OPENBLAS_THREAD_TIMEOUT=1 on the affected platforms.\nOversubscription when using Python multiprocessing with OpenBLAS or OpenMP running with multiple threads. Distributed Python libraries such as Dask and Ray recommend setting environment variables to configure OpenBLAS and OpenMP to run serially.\n\n\nProposal\nThe following are feasible steps we can take to improve the issues listed above: - The library sends a warning or error to notify the user when a known issue is detected. For example, Numba detects when libgomp and fork are used together, raising an error. - The library detects and raises a warning recommending MKL_THREADING_LAYER when LLVM OpenMP and Intel OpenMP are loaded together. For example, threadpoolctl has such a warning. - Move towards a single OpenMP and OpenBLAS on PyPI by shipping an OpenMP and OpenBLAS wheel.NumPy, SciPy, and Scikit-learn will link to those libraries during runtime. Please see the technical details section for details on how this could work."
  },
  {
    "objectID": "index.html#technical-details",
    "href": "index.html#technical-details",
    "title": "Parallalism in Numerical Python Libraries",
    "section": "Technical Details",
    "text": "Technical Details\n\nHow to ship OpenMP and OpenBLAS on PyPI?\nOpenMP and OpenBLAS are shipped wheels with their header files. When building an upstream library such as NumPy, extensions will use RPATH to link to the OpenMP and OpenBLAS wheels. auditwheel repair needs a patch so that it does not copy PyPi libraries into the wheel: auditwheel#392. Note that PEP513, explicitly allows for shared libraries to be distributed as separate packages on PyPI.\n\n\nWhich compiler to use for OpenMP?\nThere are two options: libgomp (OpenMP for GCC) or libomp (Clang for GCC). libgomp is not fork safe, but uses the GCC. We advocate for the patch into GCC to make it fork safe. libomp is fork safe, but it is an implementation detail and not part of the OpenMP specification. I would go with libomp, because it has the same symbols as libgomp and is fork safe. Upstream libraries such as NumPy or SciPy can still use GCC as their compiler.\n\n\nWhat does conda-forge do?\nFor BLAS, conda-forge builds with netlib. During installation time, BLAS can be switched to other implementations such as MKL, BLIS, OpenBLAS. See this link for details.\nFor OpenMP, conda-forge builds with libgomp, the GNU build of OpenMP. During installation time, OpenMP can be switched to libomp, the LLVM build of OpenMP. Recall that the LLVM implementation is fork-safe. Note, that the GNU implementation has target offloading symbols, while LLVM does not. See this link for details.\nLastly, Conda-forge has a mutex package ensuring that a single OpenMP or BLAS library is installed and loaded."
  }
]